#!/usr/bin/env python3
"""
Quantum State Fidelity Calculator with Noise Modeling
"""

import numpy as np
from qiskit import QuantumCircuit, Aer
from qiskit.providers.aer.noise import NoiseModel, depolarizing_error
from qiskit.quantum_info import state_fidelity

def calculate_fidelity(p: float, shots: int = 1000) -> dict:
    """
    Compute fidelity under depolarizing noise.
    
    Args:
        p: Noise probability (0 ≤ p ≤ 1)
        shots: Number of simulations
        
    Returns:
        Dictionary with fidelity and metrics
    """
    # Ideal state preparation
    qc = QuantumCircuit(2)
    qc.h(0)
    qc.cx(0, 1)
    ideal_state = qc.copy()
    
    # Noise model
    noise_model = NoiseModel()
    error = depolarizing_error(p, 1)
    noise_model.add_all_qubit_quantum_error(error, ['h', 'cx'])
    
    # Simulation
    simulator = Aer.get_backend('statevector_simulator')
    result = simulator.run(qc, noise_model=noise_model).result()
    noisy_state = result.get_statevector(qc)
    
    # Metrics
    fid = state_fidelity(
        ideal_state, 
        noisy_state
    )
    
    return {
        "p": p,
        "fidelity": fid,
        "variation": np.sqrt(fid * (1 - fid) / shots),
        "shots": shots
    }

def noise_sweep(p_values: list = None):
    """Analyze fidelity across noise levels"""
    if p_values is None:
        p_values = [0.1 * i for i in range(1, 8)]
    
    results = []
    for p in p_values:
        results.append(calculate_fidelity(p))
    
    return results

if __name__ == "__main__":
    print("Running noise analysis...")
    data = noise_sweep()
    with open('../data/noise_analysis.json', 'w') as f:
        json.dump(data, f, indent=2)
    print("Results saved to data/noise_analysis.json")
